#include<sys/types.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<netdb.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>

#define MAX_SOCK 1024
#define GET "GET"
#define HEAD "HEAD"
#define DELETE "DELETE"
#define NOT_IMPLEMENTED "Not Implemented"

#define CLOSE "close"
#define KEEP_ALIVE "keep-alive"

typedef struct response_head{
   char* connection;
   char* server;
   char* content_length;
   char* content_type;
}RESPONSE_HEAD;

typedef struct request_head{
   char* user_agent;
   char* host;
   char* connection;
}REQUEST_HEAD;

typedef struct type{
   char* method;
   char* path;
   char* protocol;
}TYPE;

typedef struct request{
   struct type* type;
   struct request_head* head;
}REQUEST;

typedef struct response{
   struct response_head* head;
   char* protocol;
   int code;
   char* status;
   char* body;
}RESPONSE;

char* toString(REQUEST);

int main(int argc,char* argv[]){      
   REQUEST request;
   REQUEST_HEAD head;
   TYPE type;
   
   char method[MAX_SOCK];
   printf("METHOD:");
   fgets(method,MAX_SOCK,stdin);
   method[strlen(method)-1]='\0';
   type.method=method;

   char path[MAX_SOCK];
   printf("PATH:");
   fgets(path,MAX_SOCK,stdin);
   path[strlen(path)-1]='\0';
   type.path=path;

   char protocol[MAX_SOCK];
   printf("PROTOCOL:");
   fgets(protocol,MAX_SOCK,stdin);
   protocol[strlen(protocol)-1]='\0';
   type.protocol=protocol;

   char user_agent[MAX_SOCK];
   printf("USER AGENT:");
   fgets(user_agent,MAX_SOCK,stdin);
   user_agent[strlen(user_agent)-1]='\0';
   head.user_agent=user_agent;

   char host[MAX_SOCK];
   printf("HOST:");
   fgets(host,MAX_SOCK,stdin);
   host[strlen(host)-1]='\0';
   head.host=host;

   char connection[MAX_SOCK];
   printf("CONNECTION:");
   fgets(connection,MAX_SOCK,stdin);
   connection[strlen(connection)-1]='\0';
   head.connection=connection;

   request.type=&type;
   request.head=&head;
   
   printf("%s\n",toString(request));      

   exit(0);
}

char* toString(REQUEST request){
   char* req_string;
   strcat(req_string,strcat(request.type->method," "));
   strcat(req_string,strcat(request.type->path," "));
   strcat(req_string,strcat(request.type->protocol," "));

   strcat(req_string,strcat(request.head->user_agent," "));
   strcat(req_string,strcat(request.head->host," "));
   strcat(req_string,request.head->connection);
   return req_string;
}
